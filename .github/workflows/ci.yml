name: CI/CD - PedidoZ API

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Test with pytest
        run: |
          pytest

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [tests]
    env:
      IMAGE_NAME: ${{ vars.DOCKER_USERNAME }}/${{ vars.MY_REPOSITORY_NAME }}
    steps:
      - uses: actions/checkout@v4

      # Define ambiente por branch (dev/main)
      - name: Select environment (dev|prod)
        id: envsel
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
          echo "TAG=${GITHUB_REF_NAME}-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_TOKEN }}

      - name: Build and Push image
        run: |
          IMAGE="docker.io/${{ env.IMAGE_NAME }}"
          TAG="${{ steps.envsel.outputs.TAG }}"
          docker build -t "${IMAGE}:${TAG}" -t "${IMAGE}:latest" .
          docker push "${IMAGE}:${TAG}"
          docker push "${IMAGE}:latest"

      - name: Set SSH target
        id: sshvars
        run: |
          if [ "${{ steps.envsel.outputs.ENV }}" = "prod" ]; then
            echo "HOST=${{ vars.EC2_HOST_PROD }}" >> $GITHUB_OUTPUT
            echo "KEY<<EOF" >> $GITHUB_OUTPUT
            echo "${{ vars.EC2_SSH_KEY_PROD }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "HOST=${{ vars.EC2_HOST_DEV }}" >> $GITHUB_OUTPUT
            echo "KEY<<EOF" >> $GITHUB_OUTPUT
            echo "${{ vars.EC2_SSH_KEY_DEV }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      # Deploy remoto via SSH (executa /opt/app/deploy.sh)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.sshvars.outputs.HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ steps.sshvars.outputs.KEY }}
          script: |
            set -e
            cd /opt/app
            ./deploy.sh
